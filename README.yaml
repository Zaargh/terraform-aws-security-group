---
#
# This is the canonical configuration for the `README.md`
# Run `make readme` to rebuild the `README.md`
#

# Name of this project
name: terraform-aws-security-group

# Tags of this project
tags:
  - aws
  - security-group
  - terraform
  - terraform-modules

# Logo for this project
#logo: docs/logo.png

# License of this project
license: "APACHE2"

# Copyrights
copyrights:
  - name: "Cloud Posse, LLC"
    url: "https://cloudposse.com"
    year: "2021"

# Canonical GitHub repo
github_repo: cloudposse/terraform-aws-security-group

# Badges to display
badges:
  - name: "Latest Release"
    image: "https://img.shields.io/github/release/cloudposse/terraform-aws-security-group.svg"
    url: "https://github.com/cloudposse/terraform-aws-security-group/releases/latest"
  - name: "Slack Community"
    image: "https://slack.cloudposse.com/badge.svg"
    url: "https://slack.cloudposse.com"

# List any related terraform modules that this module may be used with or that this module depends on.
related:
  - name: "terraform-null-label"
    description: "Terraform module designed to generate consistent names and tags for resources. Use terraform-null-label to implement a strict naming convention."
    url: "https://github.com/cloudposse/terraform-null-label"

# List any resources helpful for someone to get started. For example, link to the hashicorp documentation or AWS documentation.
references:
  - name: terraform-provider-aws
    description: Terraform AWS provider
    url: https://registry.terraform.io/providers/hashicorp/aws/latest

# Short description of this project
description: |-
  Terraform module to create AWS Security Group and rules.

# Introduction to the project
#introduction: |-
#  This is an introduction.

# How to use this module. Should be an easy example to copy and paste.
usage: |-
  This module is primarily for setting security group rules on a security group. You can provide the
  ID of an existing security group to modify, or, by default, this module will create a new security
  group and apply the given rules to it.

  ##### `rules` input
  This module provides 2 ways to set security group rules. The `rules` input takes a list of
  rule maps. The maps are compatible with (have the same keys and accept the same values) as the
  Terraform [aws_security_group_rule resource](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/security_group_rule).
  While some of the map keys are optional, Terraform requires that all of the maps in a single list have exactly the same set of keys.
  See [WARNINGS and error messages](#warnings-and-error-messages) below for details.

  ##### `rule_matrix` input
  The other way to set rules is via the `rule_matrix` input. This splits the keys of the `aws_security_group_rule` resource
  into to sets: one set defines the rule and descripition, the other set defines the subjects of the rule. As with
  `rules` and explained in the previous paragraph, all elements of the list must have all the same keys. This also holds
  for all the elements of the `rules_matrix.rules` list.

  Any map key that takes a list value must either be absent from all lists or contain lists in all lists.
  Use an empty list rather than `null` to indicate "no value". Passing in `null` instead of a list
  may cause Terraform v0.13 to crash and may cause other errors in later Terraform versions.

  The schema for the `rule matrix` is:

  ```hcl
  {
    # these top level lists define all the subjects to which rule_matrix rules will be applied
    source_security_group_ids = list of source security group IDs to apply all rules to
    cidr_blocks               = list of ipv4 CIDR blocks to apply all rules to
    ipv6_cidr_blocks          = list of ipv6 CIDR blocks to apply all rules to
    prefix_list_ids           = list of prefix list IDs to apply all rules to

    self = bool set "true" to apply the rules to the created or existing security group, null otherwise

    # each rule in the rules list will be applied to every subject defined above
    rules = [{
      type      = type of rule, either "ingress" or "egress"
      from_port = start range of protocol port
      to_port   = end range of protocol port, max is 65535
      protocol  = ip protocol name or number or "-1" for all protocols and ports

      description = free form text description of the rule
    }]
  }
  ```

  ##### Create before delete
  This module provides a `create_before_delete` option that will, when a security group needs to be replaced,
  cause Terraform to create the new one before deleting the old one. We recommend making this `true` for new security groups,
  but we default it to `false` because if you import a security group with this setting `true`, that security
  group will be deleted and replaced on the first `terraform apply`, which will likely cause a service outage.

  ### Important Notes

  ##### Unexpected changes during plan and apply
  The way Terraform works and the way this module is implemented causes security group rules
  to be dependent on their place in the input lists. If a rule is deleted and the other rules therefore move
  closer to the start of the list, those rules will be deleted and recreated. This should have no significant
  operational impact, but it can make a small change look like a big one when viewing the output of
  Terraform plan. After careful consideration, we have decided that this is preferable to the
  impositions and limitations that would come from a solution that avoids it.

  ##### WARNINGS and error messages

  **_Terraform v0.13 NOT SUPPORTED_**: While we currently allow use of this module with Terraform v0.13,
  it has a number of known issues that are fixed in Terraform v0.14 and this module is not going
  to work around. Among them are crashes due to object type conversions and the dreaded,
  ubiquitous `Error: Invalid count argument`. Our recommendation if you run into these issues is
  to upgrade to Terraform v0.14 or later. As a work around, avoid using `rule_matrix` and only
  specify rules via the `rules` input, which has fewer issues with Terraform v0.13.

  **_Objects not of the same type_**: Any time you provide a list of object, Terraform requires that all objects in the list
  must be [the exact same type](https://www.terraform.io/docs/language/expressions/type-constraints.html#dynamic-types-the-quot-any-quot-constraint).
  This means that all maps in the list have exactly the same set of keys and that the values are all the same type.
  So while some keys are optional for this module, if you include a key in any one of the maps in a list, then you
  have to include that same key in all of them.
  In rules where the key would othewise be omitted, include the key with value of `null`, unless the value is a
  list type, in which case set the value to `[]` (an empty list), due to [#28137](https://github.com/hashicorp/terraform/issues/28137).

  **_Setting `inline_rules_enabled` is not recommended and NOT SUPPORTED_**: Any issues arising from setting
  `inlne_rules_enabled = true` (including issues about setting it to `false` after setting it to `true`) will
  not be addressed, because they flow from [fundamental problems](https://github.com/hashicorp/terraform-provider-aws/issues/20046)
  with the underlying `aws_security_group` resource. The setting is provided for people who know and accept the
  limitations and trade-offs and want to use it anyway. The main advantage is that when using inline rules,
  Terraform will perform "drift detection" and attempt to remove any rules it finds in place but not
  specified inline. See [this post](https://github.com/hashicorp/terraform-provider-aws/pull/9032#issuecomment-639545250)
  for a discussion of the difference between inline and resource rules,
  and some of the reasons inline rules are not satisfactory.

  **_KNOWN ISSUE_** ([#20046](https://github.com/hashicorp/terraform-provider-aws/issues/20046)):
  If you set `inline_rules_enabled = true`, you cannot later set it to `false`. If you try,
  Terraform will [complain](https://github.com/hashicorp/terraform/pull/2376) and fail.
  You will either have to delete and recreate the security group or manually delete all
  the security group rules via the AWS console or CLI before applying `inline_rules_enabled = false`.


  ### Example code

  ```hcl
  module "label" {
    source = "cloudposse/label/null"
    # Cloud Posse recommends pinning every module to a specific version
    # version = "x.x.x"
    namespace  = "eg"
    stage      = "prod"
    name       = "bastion"
    attributes = ["public"]
    delimiter  = "-"

    tags = {
      "BusinessUnit" = "XYZ",
      "Snapshot"     = "true"
    }
  }

  module "vpc" {
    source = "cloudposse/vpc/aws"
    # Cloud Posse recommends pinning every module to a specific version
    # version = "x.x.x"
    cidr_block = "10.0.0.0/16"

    context = module.label.context
  }

  module "sg" {
    source = "cloudposse/security-group/aws"
    # Cloud Posse recommends pinning every module to a specific version
    # version = "x.x.x"

    # Security Group names must be unique within a VPC.
    # This module follows Cloud Posse naming conventions and generates the name
    # based on the inputs to the null-label module, which means you cannot
    # reuse the label as-is for more than one security group in the VPC.
    #
    # Here we add an attibute to give the security group a unique name.
    attributes = ["primary"]

    # Allow unlimited egress
    allow_all_egress = true

    rules = [
      {
        type        = "ingress"
        from_port   = 22
        to_port     = 22
        protocol    = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
        self        = null
        description = "Allow SSH from anywhere"
      },
      {
        type        = "ingress"
        from_port   = 80
        to_port     = 80
        protocol    = "tcp"
        cidr_blocks = []
        self        = true
        description = "Allow HTTP from inside the security group"
      },
    ]

    vpc_id  = module.vpc.vpc_id

    context = module.label.context
  }

  module "sg_mysql" {
    source = "cloudposse/security-group/aws"
    # Cloud Posse recommends pinning every module to a specific version
    # version = "x.x.x"

    # Add an attibute to give the Security Group a unique name
    attributes = ["mysql"]

    # Allow unlimited egress
    allow_all_egress = true

    rule_matrix =[
      # Allow any of these security groups or the specified prefixes to access MySQL
      {
        source_security_group_ids = [var.dev_sg, var.uat_sg, var.staging_sg]
        prefix_list_ids = [var.mysql_client_prefix_list_id]
        rules = [
          {
            type        = "ingress"
            from_port   = 3306
            to_port     = 3306
            protocol    = "tcp"
            description = "Allow MySQL access from trusted security groups"
          }
        ]
      }
    ]

    vpc_id  = module.vpc.vpc_id

    context = module.label.context
  }

  ```

# Example usage
examples: |-
  We have an example of using this module:
  - [`examples/complete`](https://github.com/cloudposse/terraform-aws-security-group/examples/complete) - complete example of using this module

# How to get started quickly
#quickstart: |-
#  Here's how to get started...

# Other files to include in this README from the project folder
include:
  - "docs/targets.md"
  - "docs/terraform.md"

# Contributors to this project
contributors:
  - name: "Erik Osterman"
    github: "osterman"
  - name: "Vladimir"
    github: "SweetOps"
